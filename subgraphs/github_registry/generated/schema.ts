// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewBuildCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewBuildCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewBuildCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewBuildCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): NewBuildCreated | null {
    return changetype<NewBuildCreated | null>(
      store.get_in_block("NewBuildCreated", id.toHexString())
    );
  }

  static load(id: Bytes): NewBuildCreated | null {
    return changetype<NewBuildCreated | null>(
      store.get("NewBuildCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get repository_repoId(): BigInt {
    let value = this.get("repository_repoId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set repository_repoId(value: BigInt) {
    this.set("repository_repoId", Value.fromBigInt(value));
  }

  get repository_name(): string {
    let value = this.get("repository_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repository_name(value: string) {
    this.set("repository_name", Value.fromString(value));
  }

  get repository_fullname(): string {
    let value = this.get("repository_fullname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repository_fullname(value: string) {
    this.set("repository_fullname", Value.fromString(value));
  }

  get repository_description(): string {
    let value = this.get("repository_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repository_description(value: string) {
    this.set("repository_description", Value.fromString(value));
  }

  get repository_ownerId(): Bytes {
    let value = this.get("repository_ownerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set repository_ownerId(value: Bytes) {
    this.set("repository_ownerId", Value.fromBytes(value));
  }

  get repository_size(): BigInt {
    let value = this.get("repository_size");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set repository_size(value: BigInt) {
    this.set("repository_size", Value.fromBigInt(value));
  }

  get repository_defaultBranch(): string {
    let value = this.get("repository_defaultBranch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repository_defaultBranch(value: string) {
    this.set("repository_defaultBranch", Value.fromString(value));
  }

  get repository_topics(): Array<string> {
    let value = this.get("repository_topics");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set repository_topics(value: Array<string>) {
    this.set("repository_topics", Value.fromStringArray(value));
  }

  get repository_language(): string {
    let value = this.get("repository_language");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repository_language(value: string) {
    this.set("repository_language", Value.fromString(value));
  }

  get build_branch(): string {
    let value = this.get("build_branch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set build_branch(value: string) {
    this.set("build_branch", Value.fromString(value));
  }

  get build_commitMessage(): string {
    let value = this.get("build_commitMessage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set build_commitMessage(value: string) {
    this.set("build_commitMessage", Value.fromString(value));
  }

  get build_commitHash(): string {
    let value = this.get("build_commitHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set build_commitHash(value: string) {
    this.set("build_commitHash", Value.fromString(value));
  }

  get build_cid(): string {
    let value = this.get("build_cid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set build_cid(value: string) {
    this.set("build_cid", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
