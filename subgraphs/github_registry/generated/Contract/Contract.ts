// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewBuildCreated extends ethereum.Event {
  get params(): NewBuildCreated__Params {
    return new NewBuildCreated__Params(this);
  }
}

export class NewBuildCreated__Params {
  _event: NewBuildCreated;

  constructor(event: NewBuildCreated) {
    this._event = event;
  }

  get repository(): NewBuildCreatedRepositoryStruct {
    return changetype<NewBuildCreatedRepositoryStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get build(): NewBuildCreatedBuildStruct {
    return changetype<NewBuildCreatedBuildStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class NewBuildCreatedRepositoryStruct extends ethereum.Tuple {
  get repoId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get fullname(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get ownerId(): Address {
    return this[4].toAddress();
  }

  get size(): BigInt {
    return this[5].toBigInt();
  }

  get defaultBranch(): string {
    return this[6].toString();
  }

  get topics(): Array<string> {
    return this[7].toStringArray();
  }

  get language(): string {
    return this[8].toString();
  }
}

export class NewBuildCreatedBuildStruct extends ethereum.Tuple {
  get branch(): string {
    return this[0].toString();
  }

  get commitMessage(): string {
    return this[1].toString();
  }

  get commitHash(): string {
    return this[2].toString();
  }

  get cid(): string {
    return this[3].toString();
  }
}

export class Contract__repositoriesResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: string;
  value4: Address;
  value5: BigInt;
  value6: string;
  value7: string;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: string,
    value4: Address,
    value5: BigInt,
    value6: string,
    value7: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    return map;
  }

  getRepoId(): BigInt {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getFullname(): string {
    return this.value2;
  }

  getDescription(): string {
    return this.value3;
  }

  getOwnerId(): Address {
    return this.value4;
  }

  getSize(): BigInt {
    return this.value5;
  }

  getDefaultBranch(): string {
    return this.value6;
  }

  getLanguage(): string {
    return this.value7;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  registerRepository(
    name: string,
    fullname: string,
    description: string,
    size: BigInt,
    defaultBranch: string,
    topics: Array<string>,
    language: string
  ): BigInt {
    let result = super.call(
      "registerRepository",
      "registerRepository(string,string,string,uint256,string,string[],string):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(fullname),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(size),
        ethereum.Value.fromString(defaultBranch),
        ethereum.Value.fromStringArray(topics),
        ethereum.Value.fromString(language)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerRepository(
    name: string,
    fullname: string,
    description: string,
    size: BigInt,
    defaultBranch: string,
    topics: Array<string>,
    language: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerRepository",
      "registerRepository(string,string,string,uint256,string,string[],string):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(fullname),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(size),
        ethereum.Value.fromString(defaultBranch),
        ethereum.Value.fromStringArray(topics),
        ethereum.Value.fromString(language)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repoCount(): BigInt {
    let result = super.call("repoCount", "repoCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_repoCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("repoCount", "repoCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repositories(param0: BigInt): Contract__repositoriesResult {
    let result = super.call(
      "repositories",
      "repositories(uint256):(uint256,string,string,string,address,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__repositoriesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toString()
    );
  }

  try_repositories(
    param0: BigInt
  ): ethereum.CallResult<Contract__repositoriesResult> {
    let result = super.tryCall(
      "repositories",
      "repositories(uint256):(uint256,string,string,string,address,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__repositoriesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toString()
      )
    );
  }
}

export class CreateBuildCall extends ethereum.Call {
  get inputs(): CreateBuildCall__Inputs {
    return new CreateBuildCall__Inputs(this);
  }

  get outputs(): CreateBuildCall__Outputs {
    return new CreateBuildCall__Outputs(this);
  }
}

export class CreateBuildCall__Inputs {
  _call: CreateBuildCall;

  constructor(call: CreateBuildCall) {
    this._call = call;
  }

  get repoId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get branch(): string {
    return this._call.inputValues[1].value.toString();
  }

  get commitMessage(): string {
    return this._call.inputValues[2].value.toString();
  }

  get commitHash(): string {
    return this._call.inputValues[3].value.toString();
  }

  get cid(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateBuildCall__Outputs {
  _call: CreateBuildCall;

  constructor(call: CreateBuildCall) {
    this._call = call;
  }
}

export class DelegateOwnershipCall extends ethereum.Call {
  get inputs(): DelegateOwnershipCall__Inputs {
    return new DelegateOwnershipCall__Inputs(this);
  }

  get outputs(): DelegateOwnershipCall__Outputs {
    return new DelegateOwnershipCall__Outputs(this);
  }
}

export class DelegateOwnershipCall__Inputs {
  _call: DelegateOwnershipCall;

  constructor(call: DelegateOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateOwnershipCall__Outputs {
  _call: DelegateOwnershipCall;

  constructor(call: DelegateOwnershipCall) {
    this._call = call;
  }
}

export class RegisterRepositoryCall extends ethereum.Call {
  get inputs(): RegisterRepositoryCall__Inputs {
    return new RegisterRepositoryCall__Inputs(this);
  }

  get outputs(): RegisterRepositoryCall__Outputs {
    return new RegisterRepositoryCall__Outputs(this);
  }
}

export class RegisterRepositoryCall__Inputs {
  _call: RegisterRepositoryCall;

  constructor(call: RegisterRepositoryCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get fullname(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get size(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get defaultBranch(): string {
    return this._call.inputValues[4].value.toString();
  }

  get topics(): Array<string> {
    return this._call.inputValues[5].value.toStringArray();
  }

  get language(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class RegisterRepositoryCall__Outputs {
  _call: RegisterRepositoryCall;

  constructor(call: RegisterRepositoryCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
